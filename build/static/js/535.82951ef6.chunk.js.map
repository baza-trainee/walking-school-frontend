{"version":3,"file":"static/js/535.82951ef6.chunk.js","mappings":"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","sources":["../node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.min.js","../node_modules/use-sync-external-store/shim/index.js","../node_modules/@tanstack/query-core/src/queryObserver.ts","../node_modules/@tanstack/react-query/src/useSyncExternalStore.ts","../node_modules/@tanstack/react-query/src/QueryErrorResetBoundary.tsx","../node_modules/@tanstack/react-query/src/isRestoring.tsx","../node_modules/@tanstack/react-query/src/errorBoundaryUtils.ts","../node_modules/@tanstack/react-query/src/utils.ts","../node_modules/@tanstack/react-query/src/suspense.ts","../node_modules/@tanstack/react-query/src/useQuery.ts","../node_modules/@tanstack/react-query/src/useBaseQuery.ts"],"sourcesContent":["/**\n * @license React\n * use-sync-external-store-shim.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var e=require(\"react\");function h(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var k=\"function\"===typeof Object.is?Object.is:h,l=e.useState,m=e.useEffect,n=e.useLayoutEffect,p=e.useDebugValue;function q(a,b){var d=b(),f=l({inst:{value:d,getSnapshot:b}}),c=f[0].inst,g=f[1];n(function(){c.value=d;c.getSnapshot=b;r(c)&&g({inst:c})},[a,d,b]);m(function(){r(c)&&g({inst:c});return a(function(){r(c)&&g({inst:c})})},[a]);p(d);return d}\nfunction r(a){var b=a.getSnapshot;a=a.value;try{var d=b();return!k(a,d)}catch(f){return!0}}function t(a,b){return b()}var u=\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement?t:q;exports.useSyncExternalStore=void 0!==e.useSyncExternalStore?e.useSyncExternalStore:u;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('../cjs/use-sync-external-store-shim.production.min.js');\n} else {\n  module.exports = require('../cjs/use-sync-external-store-shim.development.js');\n}\n","import {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch, isCancelledError } from './retryer'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\nimport type { Action, FetchOptions, Query, QueryState } from './query'\nimport type { QueryClient } from './queryClient'\nimport type { DefaultedQueryObserverOptions, RefetchPageFilters } from './types'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private selectError: TError | null\n  private selectFn?: (data: TQueryData) => TData\n  private selectResult?: TData\n  private staleTimeoutId?: ReturnType<typeof setTimeout>\n  private refetchIntervalId?: ReturnType<typeof setInterval>\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Set<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = new Set()\n    this.selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryOptions(options)\n\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      typeof options?.isDataEqual !== 'undefined'\n    ) {\n      this.client\n        .getLogger()\n        .error(\n          `The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option`,\n        )\n    }\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this,\n      })\n    }\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.client.getQueryCache().build(this.client, options)\n\n    const result = this.createResult(query, options)\n\n    if (shouldAssignObserverCurrentProperties(this, result, options)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult everytime\n      // an observer reads an optimistic value.\n\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.currentResult = result\n      this.currentResultOptions = this.options\n      this.currentResultState = this.currentQuery.state\n    }\n    return result\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>({\n    refetchPage,\n    ...options\n  }: RefetchOptions & RefetchPageFilters<TPageData> = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(this.client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearStaleTimeout(): void {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId)\n      this.staleTimeoutId = undefined\n    }\n  }\n\n  private clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdatedAt &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.selectFn\n      ) {\n        data = this.selectResult\n      } else {\n        try {\n          this.selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.selectResult = data\n          this.selectError = null\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError)\n          }\n          this.selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = state.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.selectError = null\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError)\n            }\n            this.selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = replaceData(prevResult?.data, placeholderData, options) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError as any\n      data = this.selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n    const isLoading = status === 'loading'\n    const isError = status === 'error'\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n      const notifyOnChangePropsValue =\n        typeof notifyOnChangeProps === 'function'\n          ? notifyOnChangeProps()\n          : notifyOnChangeProps\n\n      if (\n        notifyOnChangePropsValue === 'all' ||\n        (!notifyOnChangePropsValue && !this.trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.trackedProps,\n      )\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client.getQueryCache().build(this.client, this.options)\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(({ listener }) => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated',\n        })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: typeof options['refetchOnMount'] &\n    typeof options['refetchOnWindowFocus'] &\n    typeof options['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n\n// this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  optimisticResult: QueryObserverResult<TData, TError>,\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n) {\n  // it is important to keep this condition like this for three reasons:\n  // 1. It will get removed in the v5\n  // 2. it reads: don't update the properties if we want to keep the previous\n  // data.\n  // 3. The opposite condition (!options.keepPreviousData) would fallthrough\n  // and will result in a bad decision\n  if (options.keepPreviousData) {\n    return false\n  }\n\n  // this means we want to put some placeholder data when pending and queryKey\n  // changed.\n  if (options.placeholderData !== undefined) {\n    // re-assign properties only if current data is placeholder data\n    // which means that data did not arrive yet, so, if there is some cached data\n    // we need to \"prepare\" to receive it\n    return optimisticResult.isPlaceholderData\n  }\n\n  // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true\n  }\n\n  // basically, just keep previous properties if nothing changed\n  return false\n}\n","'use client'\n// Temporary workaround due to an issue with react-native uSES - https://github.com/TanStack/query/pull/3601\nimport { useSyncExternalStore as uSES } from 'use-sync-external-store/shim/index.js'\n\nexport const useSyncExternalStore = uSES\n","'use client'\nimport * as React from 'react'\n\n// CONTEXT\n\nexport interface QueryErrorResetBoundaryValue {\n  clearReset: () => void\n  isReset: () => boolean\n  reset: () => void\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport interface QueryErrorResetBoundaryProps {\n  children:\n    | ((value: QueryErrorResetBoundaryValue) => React.ReactNode)\n    | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function'\n        ? (children as Function)(value)\n        : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","'use client'\nimport * as React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n","'use client'\nimport * as React from 'react'\nimport { shouldThrowError } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  UseErrorBoundary,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (options.suspense || options.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  useErrorBoundary,\n  query,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  useErrorBoundary: UseErrorBoundary<\n    TQueryFnData,\n    TError,\n    TQueryData,\n    TQueryKey\n  >\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    shouldThrowError(useErrorBoundary, [result.error, query])\n  )\n}\n","export function shouldThrowError<T extends (...args: any[]) => boolean>(\n  _useErrorBoundary: boolean | T | undefined,\n  params: Parameters<T>,\n): boolean {\n  // Allow useErrorBoundary function to override throwing behavior on a per-error basis\n  if (typeof _useErrorBoundary === 'function') {\n    return _useErrorBoundary(...params)\n  }\n\n  return !!_useErrorBoundary\n}\n","import type { DefaultedQueryObserverOptions } from '@tanstack/query-core'\nimport type { QueryObserver } from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport type { QueryObserverResult } from '@tanstack/query-core'\nimport type { QueryKey } from '@tanstack/query-core'\n\nexport const ensureStaleTime = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => defaultedOptions?.suspense && willFetch(result, isRestoring)\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer\n    .fetchOptimistic(defaultedOptions)\n    .then(({ data }) => {\n      defaultedOptions.onSuccess?.(data as TData)\n      defaultedOptions.onSettled?.(data, null)\n    })\n    .catch((error) => {\n      errorResetBoundary.clearReset()\n      defaultedOptions.onError?.(error)\n      defaultedOptions.onSettled?.(undefined, error)\n    })\n","'use client'\nimport { QueryObserver, parseQueryArgs } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type { QueryFunction, QueryKey } from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1: TQueryKey | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n","'use client'\nimport * as React from 'react'\n\nimport { notifyManager } from '@tanstack/query-core'\nimport { useSyncExternalStore } from './useSyncExternalStore'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useIsRestoring } from './isRestoring'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport { ensureStaleTime, fetchOptimistic, shouldSuspend } from './suspense'\nimport type { QueryKey, QueryObserver } from '@tanstack/query-core'\nimport type { UseBaseQueryOptions } from './types'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n) {\n  const queryClient = useQueryClient({ context: options.context })\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError,\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess,\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled,\n    )\n  }\n\n  ensureStaleTime(defaultedOptions)\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        queryClient,\n        defaultedOptions,\n      ),\n  )\n\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => {\n        const unsubscribe = isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange))\n\n        // Update result to make sure we did not miss any query updates\n        // between creating the observer and subscribing to it.\n        observer.updateResult()\n\n        return unsubscribe\n      },\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (shouldSuspend(defaultedOptions, result, isRestoring)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      useErrorBoundary: defaultedOptions.useErrorBoundary,\n      query: observer.getCurrentQuery(),\n    })\n  ) {\n    throw result.error\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n"],"names":["e","require","k","Object","is","a","b","l","useState","m","useEffect","n","useLayoutEffect","p","useDebugValue","r","getSnapshot","value","d","f","u","window","document","createElement","inst","c","g","exports","useSyncExternalStore","module","QueryObserver","_Subscribable","_inherits","_super","_createSuper","client","options","_this","_classCallCheck","call","trackedProps","Set","selectError","bindMethods","setOptions","_createClass","key","this","remove","bind","refetch","listeners","size","currentQuery","addObserver","shouldFetchOnMount","executeFetch","updateTimers","hasListeners","destroy","shouldFetchOn","refetchOnReconnect","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryOptions","shallowEqualObjects","getQueryCache","notify","type","query","observer","enabled","Error","queryKey","updateQuery","mounted","shouldFetchOptionally","updateResult","staleTime","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","build","result","createResult","optimisticResult","keepPreviousData","undefined","placeholderData","isPlaceholderData","getCurrentResult","shouldAssignObserverCurrentProperties","currentResult","currentResultOptions","currentResultState","state","_this2","trackedResult","keys","forEach","defineProperty","configurable","enumerable","get","add","_ref","arguments","length","refetchPage","_objectWithoutProperties","_excluded","fetch","_objectSpread","meta","_this3","defaultedOptions","isFetchingOptimistic","then","fetchOptions","_fetchOptions$cancelR","_this4","cancelRefetch","promise","throwOnError","catch","noop","_this5","isServer","isStale","isValidTimeout","timeout","timeUntilStale","dataUpdatedAt","staleTimeoutId","setTimeout","_this$options$refetch","refetchInterval","data","nextInterval","_this6","refetchIntervalId","setInterval","refetchIntervalInBackground","focusManager","isFocused","clearTimeout","clearInterval","prevResult","prevResultState","prevResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","error","errorUpdatedAt","fetchStatus","status","isPreviousData","_optimisticResults","fetchOnMount","fetchOptionally","canFetch","networkMode","isSuccess","select","selectFn","selectResult","replaceData","process","Date","now","isFetching","isLoading","isError","isInitialLoading","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","_this7","nextResult","defaultNotifyOptions","cache","notifyOnChangeProps","notifyOnChangePropsValue","includedProps","useErrorBoundary","some","typedKey","has","shouldNotifyListeners","action","onSuccess","manual","isCancelledError","onError","_this8","notifyManager","batch","_this$options$onSucce","_this$options","_this$options$onSettl","_this$options2","onSettled","_this$options$onError","_this$options3","_this$options$onSettl2","_this$options4","_ref2","listener","Subscribable","retryOnMount","shouldLoadOnMount","refetchOnMount","field","suspense","isStaleByTime","useSyncExternalStore$1","createValue","clearReset","isReset","reset","QueryErrorResetBoundaryContext","React","useQueryErrorResetBoundary","IsRestoringContext","useIsRestoring","Provider","errorResetBoundary","useClearResetErrorBoundary","getHasError","_useErrorBoundary","params","apply","_toConsumableArray","ensureStaleTime","shouldSuspend","isRestoring","willFetch","fetchOptimistic","useQuery","arg1","arg2","arg3","Observer","ensurePreventErrorBoundaryRetry","_React$useState","queryClient","_slicedToArray","getOptimisticResult","onStoreChange","unsubscribe","subscribe","batchCalls","trackResult","useBaseQuery"],"sourceRoot":""}